# ================
# Microcode level
# ================

# Flags specify what bits are asserted for what specific functions.
# They consist of a name mapped to the bitnumber or array of bitnumbers that
# are asserted for a given flag.
# 3:0 is reserved for MC_PC_NEXT.
flags:
  # MEM0
  latch_ir_r: [5]
  latch_ir_d: [6]
  latch_pci_h: [7]
  latch_pc: [8]

  # MEM1
  latch_ram: [-9]
  latch_acc: [10]
  latch_aluo: [11]
  latch_io: [12]
  latch_raddr_l: [13]
  latch_raddr_h: [14]
  # 15: NC
  # 16: NC

  # MEM2
  # 17-20: dbus emit select
  emit_ram_dbus: [-17, 18, 19, -20]
  emit_aluo_dbus: [-17, 18, -19, -20]
  emit_aluo_reg_dbus: [-17, -18, 19, -20]
  emit_ir_d_dbus: [-17, -18, -19, -20]

  emit_dbus_pc_adder: [-21]
  emit_pc_pc_adder: [-22]
  emit_io_dbus: [-23]
  block_ram_addr_h: [24]

  # MEM3
  # 25-32: NC

  # MEM4
  alu_add: [-33, -34]
  alu_and: [33, -34]
  alu_xor: [-33, 34]
  alu_or: [33, 34]
  alu_pass_c: [-35]
  alu_pass_b: [-36]
  alu_pass_a: [-37]
  alu_inv_c: [-38]
  alu_inv_b: [39]
  alu_inv_a: [40]

flag_defaults: [
    0, 0, 0, 0, # MC_PC_NEXT
    0, # latch_ir_r
    0, # latch_ir_d
    0, # latch_pci_h
    0, # latch_pc
    1, # latch_ram
    0, # latch_acc
    0, # latch_alu_o
    0, # latch_io
    0, # latch_ram_addr_l
    0, # latch_ram_addr_h
    0, 0, # NC
    1, 0, 0, 0, # dbus emit select
    1, # emit_dbus_pc_adder
    1, # emit_pc_pc_adder
    1, # emit_io_dbus
    0, # block_ram_addr_h
    0, 0, 0, 0, 0, 0, 0, 0, # NC
    0, 0, # alu mode
    1, # alu pass c
    1, # alu pass b
    1, # alu pass a
    1, # alu inv c
    0, # alu inv b
    0  # alu inv a
]

# Aliases specify a mapping for an alias to a certain flags.
# An alias may refer to another alias.
aliases:
  alum_short_a: [alu_pass_a, alu_add]
  alum_short_b: [alu_pass_b, alu_add]
  alum_add: [alu_pass_a, alu_pass_b, alu_add]
  alum_addc: [alu_pass_a, alu_pass_b, alu_pass_c, alu_add]
  alum_sub_a: [alu_pass_a, alu_pass_b, alu_inv_a, alu_inv_c, alu_add]
  alum_subc_a: [alu_sub_a, alu_pass_c]
  alum_sub_b: [alu_pass_a, alu_pass_b, alu_inv_b, alu_inv_c, alu_add]
  alum_subc_b: [alu_sub_b, alu_pass_c]
  alum_not_a: [alu_pass_a, alu_inv_a, alu_add]
  alum_not_b: [alu_pass_b, alu_inv_b, alu_add]
  alum_and: [alu_pass_a, alu_pass_b, alu_and]
  alum_or: [alu_pass_a, alu_pass_b, alu_or]
  alum_xor: [alu_pass_a, alu_pass_b, alu_xor]

# Conditionals can be specified in front of flags with an '@S!Z <flag>' notation.
# They are specified in the array below from most significant to least significant.
# Not currently used by McAsm.
conditionals:
  - nil
  - C
  - S
  - Z

# The opcode_ids map is used by both McAsm and Asm.
# This makes it really easy to keep ids in sync across the ISA.
# It is referenced in 'instructions' for Asm, and in the
# microcode file in McAsm.
opcode_ids:
  nop:                  0   # nop

  mov_int_acc:          1   # mov 0 acc
  mov_deref_acc_acc:    2   # mov [acc] acc
  mov_reg_acc:          3   # mov %0 acc
  mov_deref_reg_acc:    4   # mov [%0] acc
  mov_mem_acc:          5   # mov [0] acc

  mov_int_deref_acc:    6   # mov 0 [acc]
  mov_reg_deref_acc:    7   # mov %0 [acc]
  mov_mem_deref_acc:    8   # mov [0] [acc]

  mov_int_mem:          9   # mov 0 [0]
  mov_acc_mem:          10  # mov acc [0]
  mov_deref_acc_mem:    11  # mov [acc] [0]
  mov_reg_mem:          12  # mov %0 [0]
  mov_deref_reg_mem:    13  # mov [%0] [0]
  mov_mem_mem:          14  # mov [0] [0]

  mov_int_reg:          15  # mov 0 %0
  mov_acc_reg:          16  # mov acc %0
  mov_deref_acc_reg:    17  # mov [acc] %0
  mov_reg_reg:          18  # mov %0 %0
  mov_deref_reg_reg:    19  # mov [%0] %0
  mov_mem_reg:          20  # mov [0] %0

  mov_int_deref_reg:    21  # mov 0 [%0]
  mov_acc_deref_reg:    22  # mov acc [%0]
  mov_reg_deref_reg:    23  # mov %0 [%0]
  mov_mem_deref_reg:    24  # mov [0] [%0]

  add_acc_acc:          25  # add acc acc
  add_int_acc:          26  # add 0 acc
  add_reg_acc:          27  # add %0 acc
  add_deref_reg_acc:    28  # add [%0] acc
  add_mem_acc:          29  # add [0] acc

  sub_int_acc:          30  # sub 0 acc
  sub_reg_acc:          31  # sub %0 acc
  sub_deref_reg_acc:    32  # sub [%0] acc
  sub_mem_acc:          33  # sub [0] acc

  jump_t:               34  # jt
  jump_ez:              35  # jez
  jump_nez:             36  # jnez
  jump_gz:              37  # jgz
  jump_lez:             38  # jlez
  jump_lz:              39  # jlz
  jump_gez:             40  # jgez

  mov_int_io_mem:       100 # mov 0 >[0]
  mov_acc_io_mem:       101 # mov acc >[0]
  mov_reg_io_mem:       102 # mov %0 >[0]

  mov_int_io_deref_reg: 103 # mov 0 >[%0]
  mov_acc_io_deref_reg: 104 # mov acc >[%0]
  mov_reg_io_deref_reg: 105 # mov %0 >[%0]

  mov_int_io_deref_acc: 106 # mov 0 >[acc]
  mov_reg_io_deref_acc: 107 # mov %0 >[acc]

  set_bsel_int:         252 # sbsel 0
  set_bsel_acc:         253 # sbsel acc
  set_bsel_reg:         254 # sbsel %0

  hcf:                  255 # hcf
  

# This is the instruction definitions used by the assembler.
# It operates in the following way:
# - Find an entry in the 'instructions' map that matches the mnemonic of the instruction.
# - Start at the start of the mnemonic array, work forwards until it finds a definition with a 'format' that matches.
# - The 'opcodes' array will be the opcodes, the 'opcodeAux' will be the initial aux data. 'opcodeAux' will be filled 
#   in with zeroes to match the length of 'opcodes'.
# - Parse the mnemonic arguments according to the 'format', apply the format instructions to the 'opcodeAux' array.
instructions:
    nop:
      - opcodes: [nop]
        opcodeAux: [0]
        format: []
      - opcodes: [nop]
        opcodeAux: [0]
        format: [acc]
    mov:
      - opcodes: [mov_int_acc]
        opcodeAux: [0]
        format: [[int, [0]], acc]
      - opcodes: [mov_deref_acc_acc]
        opcodeAux: [0]
        format: [d_acc, acc]
      - opcodes: [mov_reg_acc]
        opcodeAux: [0]
        format: [[reg, [0]], acc]
      - opcodes: [mov_deref_reg_acc]
        opcodeAux: [0]
        format: [[d_reg, [0]], acc]
      - opcodes: [mov_mem_acc]
        opcodeAux: [0]
        format: [[mem, [0]], acc]

      - opcodes: [mov_int_deref_acc]
        opcodeAux: [0]
        format: [[int, [0]], d_acc]
      - opcodes: [mov_reg_deref_acc]
        opcodeAux: [0]
        format: [[reg, [0]], d_acc]
      - opcodes: [mov_mem_deref_acc]
        opcodeAux: [0]
        format: [[mem, [0]], d_acc]

      - opcodes: [mov_int_mem, hcf]
        opcodeAux: [0, 0]
        format: [[int, [1]], [mem, [0]]]
      - opcodes: [mov_acc_mem]
        opcodeAux: [0]
        format: [acc, [mem, [0]]]
      - opcodes: [mov_deref_acc_mem]
        opcodeAux: [0]
        format: [d_acc, [mem, [0]]]
      - opcodes: [mov_reg_mem, hcf]
        opcodeAux: [0, 0]
        format: [[reg, [0]], [mem, [1]]]
      - opcodes: [mov_deref_reg_mem, hcf]
        opcodeAux: [0, 0]
        format: [[d_reg, [0]], [mem, [1]]]
      - opcodes: [mov_mem_mem, hcf]
        opcodeAux: [0, 0]
        format: [[mem, [0]], [mem, [0]]]

      - opcodes: [mov_int_reg, hcf]
        opcodeAux: [0, 0]
        format: [[int, [1]], [reg, [0]]]
      - opcodes: [mov_acc_reg]
        opcodeAux: [0]
        format: [acc, [reg, [0]]]
      - opcodes: [mov_deref_acc_reg]
        opcodeAux: [0]
        format: [d_acc, [reg, [0]]]
      - opcodes: [mov_reg_reg, hcf]
        opcodeAux: [0, 0]
        format: [[reg, [0]], [reg, [1]]]
      - opcodes: [mov_deref_reg_reg, hcf]
        opcodeAux: [0, 0]
        format: [[d_reg, [0]], [reg, [1]]]
      - opcodes: [mov_mem_reg, hcf]
        opcodeAux: [0, 0]
        format: [[mem, [0]], [reg, [1]]]

      - opcodes: [mov_int_deref_reg, hcf]
        opcodeAux: [0, 0]
        format: [[int, [1]], [d_reg, [0]]]
      - opcodes: [mov_acc_deref_reg, hcf]
        opcodeAux: [0, 0]
        format: [acc, [d_reg, [0]]]
      - opcodes: [mov_reg_deref_reg, hcf]
        opcodeAux: [0, 0]
        format: [[reg, [0]], [d_reg, [1]]]
      - opcodes: [mov_mem_deref_reg, hcf]
        opcodeAux: [0, 0]
        format: [[mem, [0]], [d_reg, [1]]]

      - opcodes: [mov_acc_mem]
        opcodeAux: [0]
        format: [acc, [mem, [0]]]
      - opcodes: [mov_int_mem, hcf]
        opcodeAux: [0, 0]
        format: [[int, [0]], [mem, [1]]]

      - opcodes: [mov_int_io_mem, hcf]
        opcodeAux: [0, 0]
        format: [[int, [1]], [io_mem, [0]]]
      - opcodes: [mov_acc_io_mem]
        opcodeAux: [0, 0]
        format: [acc, [io_mem, [0]]]
      - opcodes: [mov_reg_io_mem, hcf]
        opcodeAux: [0, 0]
        format: [[reg, [0]], [io_mem, [1]]]

      - opcodes: [mov_int_io_deref_reg, hcf]
        opcodeAux: [0, 0]
        format: [[int, [1]], [io_d_reg, [0]]]
      - opcodes: [mov_acc_io_deref_reg]
        opcodeAux: [0, 0]
        format: [acc, [io_d_reg, [0]]]

      - opcodes: [mov_int_io_deref_acc]
        opcodeAux: [0, 0]
        format: [[int, [0]], io_d_acc]

    add:
      - opcodes: [add_int_acc]
        opcodeAux: [0]
        format: [[int, [0]], acc]
      - opcodes: [add_mem_acc]
        opcodeAux: [0]
        format: [[mem, [0]], acc]
      - opcodes: [add_reg_acc]
        opcodeAux: [0]
        format: [[reg, [0]], acc]
    sub:
      - opcodes: [sub_int_acc]
        opcodeAux: [0]
        format: [[int, [0]], acc]
      - opcodes: [sub_mem_acc]
        opcodeAux: [0]
        format: [[mem, [0]], acc]

    jt:
      - opcodes: [jump_t, hcf]
        opcodeAux: [0, 0]
        format: [[label, [0, 1]]]
      - opcodes: [jump_t, hcf]
        opcodeAux: [0, 0]
        format: [[int, [0, 1]]]

    jez:
      - opcodes: [jump_ez, hcf]
        opcodeAux: [0, 0]
        format: [[label, [0, 1]]]
      - opcodes: [jump_ez, hcf]
        opcodeAux: [0, 0]
        format: [[int, [0, 1]]]

    jnez:
      - opcodes: [jump_nez, hcf]
        opcodeAux: [0, 0]
        format: [[label, [0, 1]]]
      - opcodes: [jump_nez, hcf]
        opcodeAux: [0, 0]
        format: [[int, [0, 1]]]

    jgz:
      - opcodes: [jump_gz, hcf]
        opcodeAux: [0, 0]
        format: [[label, [0, 1]]]
      - opcodes: [jump_gz, hcf]
        opcodeAux: [0, 0]
        format: [[int, [0, 1]]]

    jlez:
      - opcodes: [jump_lez, hcf]
        opcodeAux: [0, 0]
        format: [[label, [0, 1]]]
      - opcodes: [jump_lez, hcf]
        opcodeAux: [0, 0]
        format: [[int, [0, 1]]]

    jlz:
      - opcodes: [jump_lz, hcf]
        opcodeAux: [0, 0]
        format: [[label, [0, 1]]]
      - opcodes: [jump_lz, hcf]
        opcodeAux: [0, 0]
        format: [[int, [0, 1]]]

    jgez:
      - opcodes: [jump_gez, hcf]
        opcodeAux: [0, 0]
        format: [[label, [0, 1]]]
      - opcodes: [jump_gez, hcf]
        opcodeAux: [0, 0]
        format: [[int, [0, 1]]]

    sbsel:
      - opcodes: [set_bsel_int]
        opcodeAux: [0]
        format: [[int, [0]]]
      - opcodes: [set_bsel_acc]
        opcodeAux: [0]
        format: [acc]

    hcf:
      - opcodes: [hcf]
        opcodeAux: [0]
        format: []
      - opcodes: [hcf]
        opcodeAux: [0]
        format: [acc]
