
# toolchain/parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.5'

_lr_method = 'LALR'

_lr_signature = '6A50C6F57DDCCA8EA16D1C88139CE93A'
    
_lr_action_items = {'NUM_HEX':([3,4,5,6,7,8,9,10,11,12,14,16,20,],[5,-21,-20,-6,-19,5,-5,-3,-18,-2,-4,5,5,]),'IDENT':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,21,22,24,25,26,27,28,29,30,31,],[4,4,-21,-20,-6,-19,4,-5,-3,-18,-2,4,-4,-11,4,4,-7,-10,-15,-13,-17,-12,-8,-9,-16,-14,]),'NUM_BIN':([3,4,5,6,7,8,9,10,11,12,14,16,20,],[7,-21,-20,-6,-19,7,-5,-3,-18,-2,-4,7,7,]),'COND_START':([4,5,7,11,13,15,19,21,22,27,28,29,],[-21,-20,-19,-18,17,-11,17,-7,-10,-12,-8,-9,]),'COND_FLAG':([17,23,24,25,26,30,31,],[26,30,-15,26,-17,-16,-14,]),'GOTO':([4,5,7,11,13,15,19,21,22,27,28,29,],[-21,-20,-19,-18,16,-11,16,-7,-10,-12,-8,-9,]),'COMEFROM':([4,5,7,11,13,15,19,21,22,27,28,29,],[-21,-20,-19,-18,20,-11,20,-7,-10,-12,-8,-9,]),'COLON':([0,3,4,5,6,7,8,9,10,11,12,14,],[2,-22,-21,-20,-6,-19,13,-5,-3,-18,-2,-4,]),'COND_INV':([17,24,25,26,30,31,],[23,-15,23,-17,-16,-14,]),'NUM_OCT':([3,4,5,6,7,8,9,10,11,12,14,16,20,],[11,-21,-20,-6,-19,11,-5,-3,-18,-2,-4,11,11,]),'$end':([1,4,5,7,11,15,19,21,22,27,28,29,],[0,-21,-20,-19,-18,-11,-1,-7,-10,-12,-8,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ident':([2,3,8,13,18,19,],[3,6,6,15,27,15,]),'flag_cond_items':([17,],[25,]),'flag_cond':([13,19,],[18,18,]),'flag_cond_item':([17,25,],[24,31,]),'entry_args':([3,],[8,]),'entry_contents':([13,],[19,]),'number':([3,8,16,20,],[9,9,22,29,]),'entry_content_item':([13,19,],[21,28,]),'entry_arg':([3,8,],[10,14,]),'entry':([0,],[1,]),'empty':([3,],[12,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> entry","S'",1,None,None,None),
  ('entry -> COLON ident entry_args COLON entry_contents','entry',5,'p_entry','mcasm_parser.py',48),
  ('entry_args -> empty','entry_args',1,'p_entry_args_empty','mcasm_parser.py',52),
  ('entry_args -> entry_arg','entry_args',1,'p_entry_args_single','mcasm_parser.py',55),
  ('entry_args -> entry_args entry_arg','entry_args',2,'p_entry_args_mult','mcasm_parser.py',58),
  ('entry_arg -> number','entry_arg',1,'p_entry_arg','mcasm_parser.py',63),
  ('entry_arg -> ident','entry_arg',1,'p_entry_arg','mcasm_parser.py',64),
  ('entry_contents -> entry_content_item','entry_contents',1,'p_entry_contents','mcasm_parser.py',70),
  ('entry_contents -> entry_contents entry_content_item','entry_contents',2,'p_entry_contents','mcasm_parser.py',71),
  ('entry_content_item -> COMEFROM number','entry_content_item',2,'p_entry_content_item_from','mcasm_parser.py',76),
  ('entry_content_item -> GOTO number','entry_content_item',2,'p_entry_content_item_to','mcasm_parser.py',79),
  ('entry_content_item -> ident','entry_content_item',1,'p_entry_content_item_flag','mcasm_parser.py',82),
  ('entry_content_item -> flag_cond ident','entry_content_item',2,'p_entry_content_item_flag_cond','mcasm_parser.py',85),
  ('flag_cond -> COND_START flag_cond_items','flag_cond',2,'p_flag_cond','mcasm_parser.py',88),
  ('flag_cond_items -> flag_cond_items flag_cond_item','flag_cond_items',2,'p_flag_cond_items_mult','mcasm_parser.py',91),
  ('flag_cond_items -> flag_cond_item','flag_cond_items',1,'p_flag_cond_items_single','mcasm_parser.py',94),
  ('flag_cond_item -> COND_INV COND_FLAG','flag_cond_item',2,'p_flag_cond_item','mcasm_parser.py',98),
  ('flag_cond_item -> COND_FLAG','flag_cond_item',1,'p_flag_cond_item','mcasm_parser.py',99),
  ('number -> NUM_OCT','number',1,'p_number','mcasm_parser.py',108),
  ('number -> NUM_BIN','number',1,'p_number','mcasm_parser.py',109),
  ('number -> NUM_HEX','number',1,'p_number','mcasm_parser.py',110),
  ('ident -> IDENT','ident',1,'p_ident','mcasm_parser.py',115),
  ('empty -> <empty>','empty',0,'p_empty','mcasm_parser.py',119),
]
